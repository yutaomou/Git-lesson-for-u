insert into emp (id, workno, name, gender, age, idcard, workaddress, entrydate)
values (1, '1', 'Muller', '男', '19', '123456789', '北京', '2000-01-01'),
       (2, '2', 'Rong', '男', '19', '123456786', '北京', '2000-01-01'),
       (3, '3', 'Daniel', '男', '19', '123456787', '北京', '2000-01-01'),
       (4, '4', 'Joey', '男', '19', '123456789', '北京', '2000-01-01');

update emp set name ='' where id = 1;
update emp set name = '',gender = '' where id = 1;
update emp set name = '';
delete from emp where gender = '';
delete from emp;

select name, workno from emp;
select distinct workaddress from emp;
select count(emp.idcard) from emp;
select avg(age) from emp;
select max(age) from emp;

#分组查询
select emp.gender, count(*) from emp group by gender;
select emp.gender, avg(age) from emp group by gender;
select workaddress, count(*) from emp where age <45 group by workaddress having count(*) >= 3;

#排序
select * from emp order by age ;
select * from emp order by age desc ;
select * from emp order by age, entrydate desc ;

#分页查询
select * from emp limit 0,10;
select * from emp limit 10, 10;




select * from emp where gender = '男' and age between 20 and 40 and name like '%';
select emp.gender, count(*) from emp where age < 60 group by emp.gender ;
select * from emp where gender = '男' and age between 20 and 40 order by age, entrydate desc limit 5;

#编写顺序select-from-where-group by-having-order by-limit
#执行顺序from-where-group by-having-select-order by-limit

#函数
select concat('hello','world');
select lower('HELLO');
select lpad('01',5,'-');
select rpad('01',5,'-');
select trim('hello Mysql');#去除头部和尾部的空格
select substring('Hello World',1,5);

#数值函数
select ceil(1.5);
select floor(1);
select mod(7,4);
select rand();
select round(2.345,2);#四舍五入

select lpad(round((rand()*1000000),0),6,'0');#生成验证码

#日期函数
select curdate();
select curtime();
select now();
select year(now());
select month(now());
select date_add(now(),interval 70 day );
select datediff('2021-12-01','2032-01-02');

#流程控制函数
select if(true,1,0);
select ifnull(null,'ok');

select
    name,
    (case workaddrss when 'beijing' then 'capital'else 'city'end) as 'workaddress'
from emp;

#约束
create table user(
    id int primary key auto_increment comment '主键',
    name varchar(10) not null unique comment '姓名',
    age int check ( age>0 && age<100 ) comment '年龄',
    status char(1) default '1' comment '状态',
    gender char(1) comment '性别'
) comment '用户表';

#外键约束
#添加外键
alter table emp add constraint fk_emp_dept_id foreign key (id) references user(id);
alter table emp drop foreign key fk_emp_dept_id;

#多表查询
#一对多：在多的一方建立外键，指向少的一方的主键
#多对多：建立中间表，两列分别放置两个表的主键

create table student(
    id int auto_increment primary key,
    name varchar(10),
    no varchar(10)
) comment 'xueshengbiao';
insert into student values (null,'Muller','100000'),(null,'Rong','100001'),(null,'Joey','100002'),(null,'Daniel','100003');

create table course (
    id int auto_increment primary key,
    name varchar(10)
) comment 'kechengbiao';
insert into course values (null,'Java'),(null,'PHP'),(null,'MySQL'),(null,'Hadoop');

create table student_course (
    id int auto_increment comment 'zhujian' primary key,
    studentid int not null comment 'sid',
    courseid int not null comment 'cid',
    constraint fk_courseid foreign key (courseid) references course (id),#courseid关联course表的id主键
    constraint fk_studentid foreign key (studentid) references student(id)#studentid关联student表的id主键
) comment 'guanlianbiao';

insert into student_course values (null, 1, 1),(null,1,2),(null,1,3),(null,2,2),(null,2,3),(null,3,4);

#一对一关系:单表拆分，提高操作效率

#多表查询
#内连接：查询A，B表中同时有数据的记录
#外连接：左外连接：查询左表所有数据以及交集；右外连接：查询右表所有数据以及交集
#自连接：查询表自身数据

#隐式内连接
select * from emp,dept where emp.deptid = dept.id;
#显式内连接
select * from emp inner join dept on emp.deptid = dept.id;

#左外连接
select * from emp left join dept on emp.deptid = dept.id;#完全包含左表的数据
#右外连接
select * from emp right join dept on emp.deptid = dept.id;#完全包含右表的数据

#自连接
select * from emp e1,emp e2 where e1.deptid = e2.id;

#联合查询
select * from emp where gender = '男'
union all
select * from emp where gender = '女';#有重复数据

select * from emp where gender = '男'
union
select * from emp where gender = '女';#无重复数据

#子查询
select * from emp where age > (select avg(age) from emp);

#列子查询
select deptid from emp where age > (select avg(age) from emp);

#行子查询
select * from emp where (name,age) in (select name,age from emp where gender = '女');
select * from emp where(name,age) = (select name,id from emp where name = 'Muller');

#表子查询
select name,id from emp where name = '' or name ='';

#事务
#事务是一个不可分割的工作单元，要么全部执行，要么全部不执行
create table account(
    id int primary key auto_increment comment 'id',
    name varchar(10) comment 'name',
    money int comment 'money'
) comment 'account';
insert into account values (null,'Muller',100),(null,'Rong',100);

#转账操作
select * from account where name = 'Muller';
update account set money = money - 50 where name = 'Muller';
update account set money = money + 50 where name = 'Rong';
select * from account where name = 'Rong';

#设置不自动提交
select @@autocommit;
set @@autocommit = 0;

#提交事务
commit;

#回滚事务
rollback;

#事务操作
start transaction;#一但开启事务，必须提交或回滚
select * from account where name = 'Muller';
update account set money = money - 50 where name = 'Muller';
update account set money = money + 50 where name = 'Rong';
报错
select * from account where name = 'Rong';
commit;#一但程序运行成功，则提交事务
rollback;#一但程序运行失败，则回滚事务

#并发事务
                 #1.脏读：一个事务读取了另一个事务未提交的数据
                 #2.不可重复读：一个事务读取了另一个事务已经提交的数据，但是这个数据被另一个事务更新了
                 #3.幻读：一个事务读取了另一个事务已经提交的数据，但是这个数据被另一个事务插入了
                 #4.解决方法：
                          #1.加锁：加锁后，一个事务只能读取一个事务已经提交的数据，不能读取未提交的数据
                          #2.版本号：一个事务读取了另一个事务已经提交的数据，但是这个数据被另一个事务更新了，则版本号+1
                          #3.行锁：一个事务读取了另一个事务已经提交的数据，但是这个数据被另一个事务更新了，则更新数据时，先锁定数据，再更新数据
                          #隔离级别逐渐增高 性能逐渐降低
select @@transaction_isolation;#默认隔离级别为repeatable read
set session transaction isolation level repeatable read;#设置隔离级别为可重复读
set session transaction_isolation = 'serializable';#设置隔离级别为串行化

